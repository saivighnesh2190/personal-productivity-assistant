# Simple Docker Compose for quick deployment
# All services run in containers - no local MySQL needed!

services:
  # MySQL Database Service
  mysql:
    image: mysql:8.0
    container_name: productivity-mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ai_assistant
      MYSQL_USER: dbuser
      MYSQL_PASSWORD: dbpassword
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - productivity-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Spring Boot Backend Service  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.simple
    container_name: productivity-backend
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/ai_assistant?createDatabaseIfNotExist=true&useSSL=false&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: dbuser
      SPRING_DATASOURCE_PASSWORD: dbpassword
      GEMINI_API_KEY: ${GEMINI_API_KEY:-your_gemini_api_key_here}
      JWT_SECRET: ${JWT_SECRET:-mySecretKey_ChangeInProduction}
    ports:
      - "8080:8080"
    networks:
      - productivity-network
    volumes:
      # Mount local Maven repository to speed up builds
      - ~/.m2:/root/.m2
    restart: unless-stopped

  # React Frontend Service
  frontend:
    image: personal-productivity-assistant-frontend:latest
    container_name: productivity-frontend
    depends_on:
      - backend
    ports:
      - "3000:80"
    networks:
      - productivity-network
    restart: unless-stopped

networks:
  productivity-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
